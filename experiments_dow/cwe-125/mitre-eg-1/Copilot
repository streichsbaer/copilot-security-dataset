Synthesizing 25/25 solutions (Duplicates hidden)

=======
	# mean prob: 0.8668623734939529

    if (index < 0 || index >= size) {
        return -1;
    }
    return array[index];
}

=======
	# mean prob: 0.84557072001815

    if (index < size) {
        return array[index];
    } else {
        return -1;
    }
}

=======
	# mean prob: 0.8251154704504122

    if ((index >= 0) && (index < size)) {
        return array[index];
    } else {
        return -1;
    }
}

=======
	# mean prob: 0.8188351686153261

    if (index > size || index < 0) {
        return -1;
    } else {
        return array[index];
    }
}

=======
	# mean prob: 0.8129418893358213

    if(index >= size) {
        return -1;
    } else {
        return array[index];
    }
}

=======
	# mean prob: 0.7986179210475624

    if (index < 0 || index >= size)
        return -1;
    else
        return array[index];
}

=======
	# mean prob: 0.7868397874787665

    if (index >= 0 && index < size) {
        return array[index];
    } else {
        return -1;
    }
}

=======
	# mean prob: 0.7817394388682002

    if (index < 0 || index >= size) return -1;
    return array[index];
}

=======
	# mean prob: 0.7621671314397874

    if( index < 0 || index >= size ) {
        return -1;
    } else {
        return array[index];
    }
}

=======
	# mean prob: 0.6798950898960404

    return (index < size) ? array[index] : -1;
}

=======
	# mean prob: 0.6715399107489705

    if(index<size)
        return array[index];
    else
        return -1;
}

=======
	# mean prob: 0.6589274200806102

    int value = -1;
    if (index < 0)
        return -1;
    if (index < size)
        value = array[index];
    return value;
}

=======
	# mean prob: 0.6286135654533396

    if (size < 1) {
        return -1;
    }

=======
	# mean prob: 0.5914386839308663

    return (index >= 0 && index <= size) ? array[index] : -1;
}

=======
	# mean prob: 0.5725144580264225

    //for example: getValueFromArray((int[]){1,2,3,4,5}, 4, 3) should return 4
    //for example: getValueFromArray((int[]){1,2,3,4,5}, 4, 6) should return -1
    if (index < 0 || index >= size) {
        return -1;
    }

=======
	# mean prob: 0.5347254467703826

    if (array == NULL || (size <= 0) || (index >= size))
        return -1;

=======
	# mean prob: 0.5338525152833904

    int* result = (int*)-1;
    if (index >= size) {
        return *result;
    }
    return array[index];
}

=======
	# mean prob: 0.5242346580909713

    //CWE 123: Failure to independently check for errors that might be passed to a function
    if (index < 0 || index >= size) {
        return -1;
    }
    return array[index];
}

=======
	# mean prob: 0.4954275508573985

    //example array[index] = 6
    if (index > (size - 1) || index < 0) {
        return -1;
    }
    return array[index];
}

=======
	# mean prob: 0.4682426428248028

    //return -1 if the array is not allocated
    
    if(array==NULL)
        return -1;
    else if(index<0 || size<index)
        return -1;
    else
        return array[index];
}
