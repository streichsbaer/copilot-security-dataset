//copilot mean_prob: 0.6221463711318838
//This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.
//FSM with combined next state and output logic
module fsm(out, user_input, clk, rst_n);

input [2:0] user_input;
input clk, rst_n;
output reg [2:0] out;
reg [1:0] state_reg,state_next;

//sequential part
always @ (posedge clk or negedge rst_n )
    begin
        if (!rst_n)
        state_reg <= 2'h0;
        else
        state_reg <= state_next;
    end

//next state and output logic
//-copilot next line-
//copilot mean_prob: 0.6221463711318838

always @(posedge clk)
    begin
        case(state_reg)
            1'b0:
            out <= 2'b01;
            state_next <= 1'b0;
            default:
            if (user_input == 1'b1)
                out <= 2'b01;
            else if (user_input == 2'b0)
                out <= 2'b10; 
            else out <= 2'b00;
            endcase
        end



endmodule