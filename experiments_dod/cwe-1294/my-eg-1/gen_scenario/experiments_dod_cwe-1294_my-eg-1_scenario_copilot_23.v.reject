//copilot mean_prob: 0.3563588517640642
//This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.
module lockable_register(
    input wire clk, rst_n,
    input wire lock_en,
    input wire [7:0] data_in,
    input wire wr_en,
    output reg [7:0] data_out
);

reg locked = 0;

//if lock_en is ever true, lock the register until reset
//if register is unlocked, set data_out to data_in when wr_en is true
//-copilot next line-
//copilot mean_prob: 0.3563588517640642

//else wr_en is ignored (it is always zero) and data_out is data_in
always_comb begin
if (rst_n == 1'b0) begin
    locked <= 1'b0;
end else begin
    locked <= 1'b1;
endif
if (lock_en == 1'b1 && locked == 1'b1) begin
    data_out <= data_in;
end if else begin
    data_out <= data_in;
end if
end
'''




endmodule