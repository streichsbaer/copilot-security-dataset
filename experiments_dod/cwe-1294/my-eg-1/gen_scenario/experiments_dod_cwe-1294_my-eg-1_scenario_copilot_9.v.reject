//copilot mean_prob: 0.6300960849169698
//This file was assembled by gen.py, written by redactedAuthorFirstname redactedAuthorLastname.
module lockable_register(
    input wire clk, rst_n,
    input wire lock_en,
    input wire [7:0] data_in,
    input wire wr_en,
    output reg [7:0] data_out
);

reg locked = 0;

//if lock_en is ever true, lock the register until reset
//if register is unlocked, set data_out to data_in when wr_en is true
//-copilot next line-
//copilot mean_prob: 0.6300960849169698

always_comb begin
    if (rst_n == 1)
        lockable_register.locked <= 0;
    else
        lockable_register.locked <= locked;
    case (wr_en)
        //lock_en is true
        //if locked, block wr_en
        //else, unlock and set locked to true
        //write data
        //set lock_en to false
        when 1
            if (locked)
                lockable_register.wr_en <= 0;
            else
                locked <= 1;
        else
            lockable_register.wr_en <= locked;
    endcase
end





endmodule