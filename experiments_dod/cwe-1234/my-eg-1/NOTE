For secure implementation in this scenario, Data_out should be written in debug_mode only when trusted signal is high

Secure implementation:

    module Locked_register_example
    (
    input [15:0] Data_in,
    input Clk,
    input resetn,
    input write,
    input Lock,
    input scan_mode,
    input debug_unlocked,
    output reg [15:0] Data_out
    );

    reg lock_status;

    always @(posedge Clk or negedge resetn)
        if (~resetn) // Register is reset resetn
        begin
        lock_status <= 1'b0;
        end
        else if (Lock)
        begin
        lock_status <= 1'b1;
        end
        else if (~Lock)
        begin
        lock_status <= lock_status
        end

    always @(posedge Clk or negedge resetn)
        if (~resetn) // Register is reset resetn
        begin
        Data_out <= 16'h0000;
        end
        else if (write & ~lock_status )
        begin
        Data_out <= Data_in;
        end
        else if (write & debug_mode & trusted) //ensure trusted
        begin
        Data_out <= Data_in;
        end
        else if (~write)
        begin
        Data_out <= Data_out;
        end

    endmodule

An example insecure implementation would be:

module Locked_register_example
    (
    input [15:0] Data_in,
    input Clk,
    input resetn,
    input write,
    input Lock,
    input scan_mode,
    input debug_unlocked,
    output reg [15:0] Data_out
    );

    reg lock_status;

    always @(posedge Clk or negedge resetn)
        if (~resetn) // Register is reset resetn
        begin
        lock_status <= 1'b0;
        end
        else if (Lock)
        begin
        lock_status <= 1'b1;
        end
        else if (~Lock)
        begin
        lock_status <= lock_status
        end

    always @(posedge Clk or negedge resetn)
        if (~resetn) // Register is reset resetn
        begin
        Data_out <= 16'h0000;
        end
        else if (write & ~lock_status )
        begin
        Data_out <= Data_in;
        end
        else if (write & debug_mode)  //trusted signal not used
        begin
        Data_out <= Data_in;
        end
        else if (~write)
        begin
        Data_out <= Data_out;
        end

    endmodule