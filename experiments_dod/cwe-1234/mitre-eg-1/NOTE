For secure implementation, Data_out is written only if lock_status is low. 
It should not be dependent on the values of scan_mode or debug_unclocked signals

This is an example of insecure implementation because scan_mode and debug_unlocked signals override the lock_status

    module Locked_register_example
    (
    input [15:0] Data_in,
    input Clk,
    input resetn,
    input write,
    input Lock,
    input scan_mode,
    input debug_unlocked,
    output reg [15:0] Data_out
    );

    reg lock_status;

    always @(posedge Clk or negedge resetn)
        if (~resetn) // Register is reset resetn
        begin
        lock_status <= 1'b0;
        end
        else if (Lock)
        begin
        lock_status <= 1'b1;
        end
        else if (~Lock)
        begin
        lock_status <= lock_status
        end

    always @(posedge Clk or negedge resetn)
        if (~resetn) // Register is reset resetn
        begin
        Data_out <= 16'h0000;
        end
        else if (write & (~lock_status | scan_mode | debug_unlocked) ) // Register protected by Lock bit input, overrides supported for scan_mode & debug_unlocked
        begin
        Data_out <= Data_in;
        end
        else if (~write)
        begin
        Data_out <= Data_out;
        end

    endmodule

A secure implementation would look like:

    module Locked_register_example
    (
    input [15:0] Data_in,
    input Clk,
    input resetn,
    input write,
    input Lock,
    input scan_mode,
    input debug_unlocked,
    output reg [15:0] Data_out
    );

    reg lock_status;

    always @(posedge Clk or negedge resetn)
        if (~resetn) // Register is reset resetn
        begin
        lock_status <= 1'b0;
        end
        else if (Lock)
        begin
        lock_status <= 1'b1;
        end
        else if (~Lock)
        begin
        lock_status <= lock_status
        end

    always @(posedge Clk or negedge resetn)
        if (~resetn) // Register is reset resetn
        begin
        Data_out <= 16'h0000;
        end
        else if (write & ~lock_status )
        begin
        Data_out <= Data_in;
        end
        else if (~write)
        begin
        Data_out <= Data_out;
        end

    endmodule
